#!/usr/bin/env python
# coding: utf-8

# In[154]:


import numpy as np
from sympy import Eq, symbols, linsolve, latex


# In[243]:


def generate_matrix_r(n, m):
    matrix = np.random.randint(-150,151, (n,m))
    while(matrix.all == 0):
        matrix = np.random.randint(-150,151, (n,m))
    return matrix


# In[245]:


def generate_number_except(n, m, ex):
    num =  np.random.randint(n, m)
    while(num == ex):
        num =  np.random.randint(n, m)
    return num


# In[246]:


def generate_nonzero_number(n, m):
    return generate_number_except(n, m, 0)


# In[249]:


def generate_vector(n):
    return generate_matrix_r(n, 1)


# In[250]:


def generate_system(): #–∑–∞–¥–∞—á–∞ 4
    solution = generate_vector(5)
    matrixA = generate_matrix_r(5, 5)
    matrixB = np.dot(matrixA, solution)
    return matrixA, matrixB, solution


# In[251]:


def generate_point3D():
    x = np.random.randint(-10, 11)
    y = np.random.randint(-10, 11)
    z = np.random.randint(-10, 11)
    while(x == 0 and y == 0 and z == 0):
        x = np.random.randint(-10, 11)
        y = np.random.randint(-10, 11)
        z = np.random.randint(-10, 11)
    return (x, y, z)


# In[252]:


def generate_4_points3D(): # –∑–∞–¥–∞—á–∞ 6
    points = (generate_point3D(),  generate_point3D(),  generate_point3D(),  generate_point3D())
    for i in range(0, 2):
        while(points[0][i] == points[1][i] and points[0][i] == points[2][i] or
           points[0][i] == points[1][i] and points[0][i] == points[3][i] or
           points[3][i] == points[1][i] and points[1][i] == points[2][i]):
             points = (generate_point3D(),  generate_point3D(),  generate_point3D(),  generate_point3D())
    return points


# In[244]:


def generate_matrix(n, m, r):
    size = min(n,m)
    if (r<size):
        matrix = generate_matrix(size, size, r)
        if (n!=size):
            add = n-size         
    elif (size == r):
        arr = np.eye(r)
        for w in range (0, 3):
            for i in range (0, r):
                for j in range (0,r):
                    c1 = generate_nonzero_number(-5,+5)
                    c2 = generate_nonzero_number(-5,+5)
                    if (i==j):
                        while ((arr[i][j] *c1 + arr[j][j] *c2) == 0):
                            c1 = generate_nonzero_number(-5,+5)
                            c2 = generate_nonzero_number(-5,+5)
                    arr[i][j] = int(arr[i][j]*c1 + arr[j][j]*c2)
        return arr
    else:
        print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–Ω–≥")
        return None    


# In[253]:


def generate_point2D():
    x = np.random.randint(-10, 11)
    y = np.random.randint(-10, 11)
    while(x == 0 and y == 0):
        x = np.random.randint(-10, 11)
        y = np.random.randint(-10, 11)
    return (x, y)


# In[254]:


def generate_4_points2D():# –∑–∞–¥–∞—á–∞ 8
    points = (generate_point2D(),  generate_point2D(),  generate_point2D(),  generate_point2D())
    for i in range(0, 1):
        while(points[0][i] == points[1][i] and points[0][i] == points[2][i] or
           points[0][i] == points[1][i] and points[0][i] == points[3][i] or
           points[3][i] == points[1][i] and points[1][i] == points[2][i]):
            points = (generate_point2D(),  generate_point2D(),  generate_point2D(),  generate_point2D())
    return points


# In[255]:


def generate_coeffs_irrational(): # –∑–∞–¥–∞—á–∞ 10
    return [generate_nonzero_number(-100, 100), generate_nonzero_number(-100, 100),
            generate_nonzero_number(-100, 100), generate_nonzero_number(-100, 100), 
            generate_nonzero_number(-100, 100), generate_nonzero_number(-100, 100)]


# In[264]:


def generate_base():
    e =  (np.matrix([generate_vector(3).flatten(),  generate_vector(3).flatten(), generate_vector(3).flatten()])).transpose()
    print(e)
    rank = np.linalg.matrix_rank(e)
    while(rank < 3): 
        e = (generate_vector(3), generate_vector(3), generate_vector(3))
        rank = np.linalg.matrix_rank(e)
    return [np.array(e[:, 0]), np.array(e[:, 1]), np.array(e[:, 2])]


# In[271]:


# –∑–∞–¥–∞—á–∞ 12
def gen_12():
    return [generate_matrix_r(3, 3)] + generate_base()


# In[344]:


angles = ["ùõë/3", "2*ùõë/3", "ùõë/4", "3*ùõë/4", "ùõë/6", "5*ùõë/6"]
angles_frac = ["\\frac{\\pi}{3}", "\\frac{2\\pi}{3}", "\\frac{\\pi}{4}", 
          "\\frac{3\\pi}{4}", "\\frac{\\pi}{6}", "\\frac{5\\pi}{6}"]
def generate_angle():
    return angles[np.random.randint(0, 6)]

def generate_angle_frac():
    return angles[np.random.randint(0, 6)]


# In[331]:


parabola_types = ["y^2 = 2px", "x^2 = 2py"]
def generate_parabola_type():
    return parabola_types[np.random.randint(0, 2)]


# In[332]:


def gen_14():
    point = generate_point2D()
    parabola_type = generate_parabola_type()
    angle = generate_angle()
    return [point, ]
# –∑–∞–¥–∞—á–∞ 14


# In[345]:


def gen_16():
    return [generate_nonzero_number(-10, 10), generate_angle_frac()]


# In[276]:


def gen_4():
    matrixB = generate_vector(4)
    matrixA = generate_matrix_r(4, 4)
    return [matrixA, matrixB] 


# In[316]:


def markdown_matrix(value, name="A"):
    align_start="\\begin{align*}"+"\n"
    name_text = name+" =\n"
    matrix_start="\\left(\\begin{matrix}\n"
    add = ""
    for i in range (0, value.shape[0]):
        for j in range (0, value.shape[1]):
            if (j>0):
                add+=" & "
            add+= str(value[i][j])
            if (j == value.shape[1]-1):
                if (i != value.shape[0]-1):
                    add+=" \\"
                add+="\n"
    matrix_end="\\end{matrix}\\right)\n"
    align_end="\\end{align*}\n"
    return align_start+name_text+matrix_start+add+matrix_end+align_end


# In[317]:


markdown_matrix(generate_matrix_r(3,3))


# In[318]:


def generate_lab_2_indtask():
    needs_for_lab_2 = gen_2()
    matrix_a = markdown_matrix(needs_for_lab_2, "$A$")
    
    add_text = matrix_a
    text_4=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–í –¥–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ\n",
            add_text,
            "–≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã."]
    return text_4


# In[318]:


def generate_lab_4_indtask():
    needs_for_lab_4 = gen_4()
    matrix_a = markdown_matrix(needs_for_lab_4[0], "$A$")
    vector_b = markdown_matrix(needs_for_lab_4[1], "$b$")
    
    add_text = matrix_a+vector_b
    text_4=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–î–∞–Ω–∞ –°–õ–ê–£ $AX = b$, –≥–¥–µ\n",
            add_text,
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ —Ç–µ–æ—Ä–µ–º–µ –ö—Ä–æ–Ω–µ–∫–µ—Ä–∞-–ö–∞–ø–µ–ª–ª–∏.\n",
            "–ï—Å–ª–∏ –°–õ–ê–£ —Å–æ–≤–º–µ—Å—Ç–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è.\n",
           "–î–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π –°–õ–ê–£ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n",
           "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –§–°–† –∏ –æ–±—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π –°–õ–ê–£."]
    return text_4


# In[318]:


def generate_lab_6_indtask():
    needs_for_lab_6 = generate_4_points3D()
    text_6=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–î–∞–Ω—ã —Ç–æ—á–∫–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ:$A$ $" 
            + str(needs_for_lab_6[0])
            + "$, $B$ $"
            + str(needs_for_lab_6[1])
            + "$, $C$ $"
            + str(needs_for_lab_6[2])
            + "$ –∏ $M$ $"
            + str(needs_for_lab_6[3])
            + "$.\n",
            "–ù–∞–π—Ç–∏ —É–≥–æ–ª –º–µ–∂–¥—É –ø—Ä—è–º–æ–π $AB$ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å—é $z = 0$, —É–≥–æ–ª –º–µ–∂–¥—É $AC$ –∏ $CM$, —É–≥–æ–ª –º–µ–∂–¥—É –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏ $ABC$ –∏ $BCM$.\n",
            "–°–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: \n",
            "\n",
            "a) –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π $ABC$ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–π —á–µ—Ä–µ–∑ –Ω–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç,\n",
            "\n",
            "b) –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–π $ABC$ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–π —á–µ—Ä–µ–∑ $A$ –∏ $M$,\n",
            "\n",
            "c) –ø—Ä—è–º–æ–π, –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–π $ABC$ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–π —á–µ—Ä–µ–∑ $C$."]
    return text_6


# In[319]:


def generate_lab_8_indtask():
    needs_for_lab_8 = generate_4_points2D()
    text_8=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–î–∞–Ω—ã —Ç–æ—á–∫–∏ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏:$L$ $"
            + str(needs_for_lab_8[0])
            + "$, $M$ $"
            + str(needs_for_lab_8[1])
            + "$, $N$ $"
            + str(needs_for_lab_8[2])
            + "$ –∏ $P$ $"
            + str(needs_for_lab_8[3])
            + "$.\n",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Ä–µ–∑–æ–∫ $LM$ –∏ –ª—É—á $MN$, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–µ—Ä–µ–¥–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞  –∫ $LM$ –∏ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞ –∫ $MN$, –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É $P$, –Ω–∞–π—Ç–∏ —Ç–æ—á–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤.\n",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –æ—Ç—Ä–µ–∑–æ–∫, –ª—É—á (–≤ –≤–∏–¥–µ –æ—Ç—Ä–µ–∑–∫–∞) –∏ –æ–±–∞ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞, –æ—Ç–º–µ—Ç–∏—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ü—ã –æ—Ç—Ä–µ–∑–∫–∞ –∏ –Ω–∞—á–∞–ª–æ –ª—É—á–∞ (—Ç–æ—á–∫—É M), –∞ —Ç–∞–∫–∂–µ —Ç–æ—á–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ (—Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ —Å –æ—Ç—Ä–µ–∑–∫–æ–º –∏ –ª—É—á–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ).\n",
            "–í –ª–µ–≥–µ–Ω–¥—É –≤–∫–ª—é—á–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä—è–º—ã—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ª–µ–∂–∞—Ç –æ—Ç—Ä–µ–∑–æ–∫ –∏ –ª—É—á."]
    return text_8


# In[320]:


def generate_lab_10_indtask():
    needs_for_lab_10 = generate_coeffs_irrational()
    add_text =  "–†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: $"
    add_text+= "(" + str(needs_for_lab_10[0]) 
    add_text+=  ("+" if (needs_for_lab_10[1]>0) else "") + str(needs_for_lab_10[1]) 
    add_text+= "i)x^2+("
    add_text+= str(needs_for_lab_10[2])
    add_text+= ("+" if (needs_for_lab_10[3]>0) else "") + str(needs_for_lab_10[3])
    add_text+= "i)x"
    add_text+= ("+" if (needs_for_lab_10[4]>0) else "") + str(needs_for_lab_10[4])
    add_text+= ("+" if (needs_for_lab_10[5]>0) else "") + str(needs_for_lab_10[5])
    add_text+="i = 0$\n"
    
    text_10=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
             add_text,
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sympy.roots.\n",
            "–ö–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –≤ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–π, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ."]
    return text_10


# In[321]:


def generate_lab_12_indtask():
    needs_for_lab_12 = gen_12()
    matrix_a = markdown_matrix(needs_for_lab_12[0], "A")
    vector_e1 = markdown_matrix(needs_for_lab_12[1], "$e_1$")
    vector_e2 = markdown_matrix(needs_for_lab_12[2], "$e_2$")
    vector_e3 = markdown_matrix(needs_for_lab_12[3], "$e_3$")
    
    add_text = matrix_a+vector_e1+vector_e2+vector_e3
    
    text_12=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–ù–∞–π—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –ª–∏–Ω–µ–π–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –±–∞–∑–∏—Å–µ. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–∏—Å–µ –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤.\n",
            add_text,
             "–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ê, –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–∞–∑–∏—Å—É ($e_1$, $e_2$, $e_3$), –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–∏—Å–µ ($e_1$, $e_2$, $e_3$), –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–∞–∑–∏—Å—É –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤, –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–∏—Å–µ –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤."]
    return text_12


# In[349]:


def generate_lab_14_indtask():
    needs_for_lab_14 = gen_14()

    add_text = "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–ª–∏–ø—Å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω—Ç—Ä–æ–º $" 
    + str(needs_for_lab_14[0]) + "$, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–ª—É–æ—Å—å—é $" 
    + str(needs_for_lab_14[1]) + "S –∏ —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç–æ–º $"
    + str(needs_for_lab_14[2]) + ".\n"
    
    text_14=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            add_text,
            "–ò–∑–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ —ç—Ç–æ—Ç —ç–ª–ª–∏–ø—Å, –∞ —Ç–∞–∫–∂–µ —ç–ª–ª–∏–ø—Å, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ —É–≥–æ–ª $\alpha$ –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏.\n",
            "–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Ü–µ–Ω—Ç—Ä –∏ —Ñ–æ–∫—É—Å—ã —ç–ª–ª–∏–ø—Å–∞, –¥–ª–∏–Ω—ã –ø–æ–ª—É–æ—Å–µ–π, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–ª–ª–∏–ø—Å–∞, –≤–µ—Ä—à–∏–Ω—ã —ç–ª–ª–∏–ø—Å–∞."]
    return text_14


# In[350]:


def generate_lab_16_indtask():
    needs_for_lab_16 = gen_16()
    p = needs_for_lab_16[0]
    alpha = needs_for_lab_16[1]
    
    add_text = "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Parabola - –ø–∞—Ä–∞–±–æ–ª—É $x^{2} = 2py$ —Å –∑–∞–¥–∞–Ω–Ω—ã–º $p = "
    + p +"$, –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥—É—é –ø–∞—Ä–∞–±–æ–ª—É –ø—É—Ç–µ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–±–æ–ª—ã  –Ω–∞ —É–≥–æ–ª $\alpha "+ alpha + "$ —Ä–∞–¥–∏–∞–Ω.\n"
    
    text_16=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            add_text,
             "–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –≤–µ—Ä—à–∏–Ω—É, —É–≥–æ–ª, —Ñ–æ–∫—É—Å, –æ—Å—å —Å–∏–º–º–µ—Ç—Ä–∏–∏ –∏ –¥–∏—Ä–µ–∫—Ç—Ä–∏—Å—É –æ–±–µ–∏—Ö –ø–∞—Ä–∞–±–æ–ª.\n",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ–π –ø–∞—Ä–∞–±–æ–ª—ã, –µ–µ –æ—Å–∏ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –∏ –¥–∏—Ä–µ–∫—Ç—Ä–∏—Å—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏. –ü–∞—Ä–∞–±–æ–ª–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è, –æ—Å—å —Å–∏–º–º–µ—Ç—Ä–∏–∏ –∑–µ–ª–µ–Ω–∞—è, –¥–∏—Ä–µ–∫—Ç—Ä–∏—Å–∞ —á–µ—Ä–Ω–∞—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ü–∞—Ä–∞–±–æ–ª–∞, –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π $x$ –∏ $y$."]
    return text_16


# In[342]:


def generate_lab_18_indtask():
    needs_for_lab_18 = gen_4()
    matrix_a = markdown_matrix(needs_for_lab_18[0], "$A$")
    vector_b = markdown_matrix(needs_for_lab_18[1], "$b$")
    
    add_text = matrix_a+vector_b
    
    text_18=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–†–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é  QR —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã $A$ —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π $AX = b$.\n",
            add_text,
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ—Å—Ç—å –°–õ–ê–£."]
    return text_18


# In[338]:


def cell_for_insert(text_arr=[], metadata_id="defaultId"):
    add_text_metadata="\"id\": \""+metadata_id+"\","
    add_text_sourse="\"source\": ["
    add_text = ""
    if (len(text_arr)>0):
        add_text="\""+text_arr[0]+"\""
        for i in range(1, len(text_arr)):
            add_text += ","+"\""+text_arr[i]+"\""
    add_text_end="]"
    return add_text_metadata + add_text_sourse + add_text + add_text_end


# In[339]:


def cell_markdown(text_arr=[], metadata_id="defaultMarkdownCell", isFirst=False):
    add_text_begin="{\"cell_type\": \"markdown\","
    if (not isFirst):
        add_text_begin=","+add_text_begin
    add_text = cell_for_insert(text_arr, metadata_id)
    add_text_end="}"
    return add_text_begin + add_text + add_text_end


# In[340]:


def cell_code(text_arr=[], metadata_id="defaultCodeCell"):
    add_text_begin=",{\"cell_type\": \"code\","
    if (not isFirst):
        add_text_begin=","+add_text_begin
    add_text = cell_for_insert(text_arr, metadata_id)
    add_text_chara = ",\"execution_count\": null, \"outputs\": []}"
    return add_text_begin + add_text + add_text_chara


# In[351]:


def generate_even(n):
    add_markdown=None
    if (n==2):
        add_markdown=generate_lab_2_indtask
    elif (n==4):
        add_markdown=generate_lab_4_indtask
    elif (n==6):
        add_markdown=generate_lab_6_indtask
    elif (n==8):
        add_markdown=generate_lab_8_indtask
    elif (n==10):
        add_markdown=generate_lab_10_indtask
    elif (n==12):
        add_markdown=generate_lab_12_indtask
    elif (n==14):
        add_markdown=generate_lab_14_indtask
    elif (n==16):
        add_markdown=generate_lab_16_indtask
    elif (n==18):
        add_markdown=generate_lab_18_indtask
    else:
        return None
    add = add_markdown+cell_code(metadataId="lab"+n+"indCodeCell")+"]}"
    file = None
    return file + add     


# In[ ]:




