#!/usr/bin/env python
# coding: utf-8

# *–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã*

# In[79]:


import numpy as np
from sympy import Eq, symbols, linsolve, latex


# # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á—ë—Ç–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç –Ω–∞ –∫—É—Ä—Å–µ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –ø—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ –∞–ª–≥–µ–±—Ä–µ –Ω–∞ Python

# ## –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

# –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ $[n;m)$ –±–µ–∑ —á–∏—Å–ª–∞ $ex$. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ $ex$ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞–µ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

# In[80]:


def generate_number_except(n, m, ex):
    num =  np.random.randint(n, m)
    while(num == ex):
        num =  np.random.randint(n, m)
    return num


# –ß–∞—Å—Ç–Ω—ã–º —Å–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —á–∏—Å–ª–æ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω—É–ª—è.

# In[81]:


def generate_nonzero_number(n, m):
    return generate_number_except(n, m, 0)


# –ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç–∫—É

# In[188]:


def random_bool():
    return np.random.randint(0, 2) == 0


# –°–æ–∑–¥–∞–¥–∏–º —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

# In[82]:


def generate_vector(n):
    return generate_matrix_r(n, 1)


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–∞ n –Ω–∞ m

# In[83]:


def generate_matrix_r(n, m):
    matrix = np.random.randint(-150,151, (n,m))
    while(matrix.all == 0):
        matrix = np.random.randint(-150,151, (n,m))
    return matrix


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –°–õ–ê–£ $AX = b$

# In[84]:


def generate_system(): #–∑–∞–¥–∞—á–∞ 4
    solution = generate_vector(5)
    matrixA = generate_matrix_r(5, 5)
    matrixB = np.dot(matrixA, solution)
    return matrixA, matrixB, solution


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2D —Ç–æ—á–∫—É

# In[85]:


def generate_point2D():
    x = np.random.randint(-10, 11)
    y = np.random.randint(-10, 11)
    while(x == 0 and y == 0):
        x = np.random.randint(-10, 11)
        y = np.random.randint(-10, 11)
    return (x, y)


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3D —Ç–æ—á–∫—É

# In[86]:


def generate_point3D():
    x = np.random.randint(-10, 11)
    y = np.random.randint(-10, 11)
    z = np.random.randint(-10, 11)
    while(x == 0 and y == 0 and z == 0):
        x = np.random.randint(-10, 11)
        y = np.random.randint(-10, 11)
        z = np.random.randint(-10, 11)
    return (x, y, z)


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö —Ç–æ—á–µ–∫ –≤ –¥–≤—É–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –ø–æ –æ—Å—è–º –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç

# In[87]:


def generate_4_points2D():# –∑–∞–¥–∞—á–∞ 8
    points = (generate_point2D(),  generate_point2D(),  generate_point2D(),  generate_point2D())
    for i in range(0, 1):
        while(points[0][i] == points[1][i] and points[0][i] == points[2][i] or
           points[0][i] == points[1][i] and points[0][i] == points[3][i] or
           points[3][i] == points[1][i] and points[1][i] == points[2][i]):
            points = (generate_point2D(),  generate_point2D(),  generate_point2D(),  generate_point2D())
    return points


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö —Ç–æ—á–µ–∫ –≤ —Ç—Ä—ë—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –¢—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π, —Ç–∞–∫ –µ—â—ë —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç

# In[88]:


def generate_4_points3D(): # –∑–∞–¥–∞—á–∞ 6
    points = (generate_point3D(),  generate_point3D(),  generate_point3D(),  generate_point3D())
    for i in range(0, 2):
        while(points[0][i] == points[1][i] and points[0][i] == points[2][i] or
           points[0][i] == points[1][i] and points[0][i] == points[3][i] or
           points[3][i] == points[1][i] and points[1][i] == points[2][i]):
             points = (generate_point3D(),  generate_point3D(),  generate_point3D(),  generate_point3D())
    return points


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–∑–º–µ–Ω–∞ $n$ –Ω–∞ $m$ —Å —Ä–∞–Ω–≥–æ–º $r$

# In[89]:


def generate_matrix(n, m, r):
    size = min(n,m)
    if (r<size):
        matrix = generate_matrix(size, size, r)
        if (n!=size):
            add = n-size         
    elif (size == r):
        arr = np.eye(r)
        for w in range (0, 3):
            for i in range (0, r):
                for j in range (0,r):
                    c1 = generate_nonzero_number(-5,+5)
                    c2 = generate_nonzero_number(-5,+5)
                    if (i==j):
                        while ((arr[i][j] *c1 + arr[j][j] *c2) == 0):
                            c1 = generate_nonzero_number(-5,+5)
                            c2 = generate_nonzero_number(-5,+5)
                    arr[i][j] = int(arr[i][j]*c1 + arr[j][j]*c2)
        return arr
    else:
        print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–Ω–≥")
        return None    


# In[90]:


generate_matrix(2, 3, 2)


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è $(a+b\cdot i)x^2 + (c+d\cdot i)x + e + f\cdot i = 0$

# In[91]:


def generate_coeffs_irrational(): # –∑–∞–¥–∞—á–∞ 10
    return [generate_nonzero_number(-100, 100), generate_nonzero_number(-100, 100),
            generate_nonzero_number(-100, 100), generate_nonzero_number(-100, 100), 
            generate_nonzero_number(-100, 100), generate_nonzero_number(-100, 100)]


# In[92]:


def generate_base():
    e =  (np.matrix([generate_vector(3).flatten(),  generate_vector(3).flatten(), generate_vector(3).flatten()])).transpose()
    print(e)
    rank = np.linalg.matrix_rank(e)
    while(rank < 3): 
        e = (generate_vector(3), generate_vector(3), generate_vector(3))
        rank = np.linalg.matrix_rank(e)
    return [np.array(e[:, 0]), np.array(e[:, 1]), np.array(e[:, 2])]


# –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä "–∫—Ä–∞—Å–∏–≤—ã—Ö" —É–≥–æ–ª–æ–≤

# In[185]:


angles = ["ùõë/3", "2*ùõë/3", "ùõë/4", "3*ùõë/4", "ùõë/6", "5*ùõë/6"]
angles_frac = ["\\frac{\\pi}{3}", "\\frac{2\\pi}{3}", "\\frac{\\pi}{4}", 
          "\\frac{3\\pi}{4}", "\\frac{\\pi}{6}", "\\frac{5\\pi}{6}"]
def generate_angle():
    return angles[np.random.randint(0, 6)]

def generate_angle_frac():
    return angles_frac[np.random.randint(0, 6)]


# –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –¥–≤—É—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–±–æ–ª—ã

# In[94]:


parabola_types = ["y^2 = 2px", "x^2 = 2py"]
def generate_parabola_type():
    return parabola_types[np.random.randint(0, 2)]


# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 2 - —ç—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–µ–µ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è.

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 4: –ú–∞—Ç—Ä–∏—Ü–∞ –ê –∏ –≤–µ–∫—Ç–æ—Ä b

# In[96]:


def gen_4():
    res = generate_system()
    return [res[0], res[1]] 


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 6: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ **generate_4_points3D**

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 8: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ **generate_4_points2D**

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 10: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ **generate_coeffs_irrational**

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 12: –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ 3 –Ω–∞ 3 –∏ –±–∞–∑–∏—Å–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞ $e_1, e_2, e_3$

# In[97]:


# –∑–∞–¥–∞—á–∞ 12
def gen_12():
    return [generate_matrix_r(3, 3)] + generate_base()


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 14: —Ü–µ–Ω—Ç—Ä —ç–ª–ª–∏–ø—Å–∞, –µ–≥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª—É–æ—Å—å $b$ –∏ —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç $\epsilon$, —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ $\alpha$.

# In[182]:


def gen_14():
    point = generate_point2D()
    a = generate_nonzero_number(1, 10)
    b = generate_number_except(1, 10, a)
    
    tmp = min(a,b)
    a = max(a,b)
    b = tmp
    
    c = (a**2-b**2)**0.5
    epsilon = c/a
    return [point, b, epsilon, generate_angle_frac()]
# –∑–∞–¥–∞—á–∞ 14


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 16: —Ç–æ—á–∫–∞ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –≤–∏–¥ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–±–æ–ª—ã, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ p, —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞

# In[165]:


def gen_16():
    return [generate_point2D(), generate_parabola_type(), 
            generate_nonzero_number(-10, 10), generate_angle_frac()]


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 18: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–º —Ñ—É–Ω–∫—Ü–∏–µ–π **gen_4** –¥–ª—è –∑–∞–¥–∞—á–∏ 4.

# ## –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

# ### –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

# –ó–∞–ø–∏—Å–∞—Ç—å –≤ –º–∞—Ä–∫–¥–∞—É–Ω–µ –º–∞—Ç—Ä–∏—Ü—É –∏–ª–∏ –≤–µ–∫—Ç–æ—Ä (—Å —É—á—ë—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª)

# In[166]:


def markdown_matrix(value, name="A"):
    align_start="\\begin{align*}"+"\n"
    name_text = name+" =\n"
    matrix_start="\\left(\\begin{matrix}\n"
    add = ""
    for i in range (0, value.shape[0]):
        for j in range (0, value.shape[1]):
            if (j>0):
                add+=" & "
            add+= str(value[i][j])
            if (j == value.shape[1]-1):
                if (i != value.shape[0]-1):
                    add+=" \\"
                add+="\n"
    matrix_end="\\end{matrix}\\right)\n"
    align_end="\\end{align*}\n"
    return align_start+name_text+matrix_start+add+matrix_end+align_end


# In[167]:


markdown_matrix(generate_matrix_r(3,3))


# –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:

# \begin{align*}A =\left(\begin{matrix}-37 & -62 & -110 \\-100 & -124 & -119 \\85 & -111 & -109\end{matrix}\right)\end{align*}

# ### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 2

# In[193]:


def generate_lab_2_indtask():
    a = generate_nonzero_number(5,15)
    b = generate_number_except(10, 35, a)
    a, b = min(a,b), max(a,b)
    
    step_1 = "1. –°–æ—Å—Ç–∞–≤—å—Ç–µ –º–∞—Ç—Ä–∏—Ü—É $A$ —Ä–∞–∑–º–µ—Ä–∞ 7 –Ω–∞ 8, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ "
    step_1+= str(a) + " –≤ "
    if (random_bool()):
        step_1+="–Ω–µ"

    step_1+="—á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö "
    
    if (random_bool()):
        step_1+="–Ω–µ"
        
    step_1+="—á–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω—ã "
    step_1+= str(b) + ".\n"
    
    step_2 = "2. "
    if (random_bool()):
        step_2+="–£–¥–∞–ª–∏—Ç–µ "
        if (random_bool()):
            step_2+="—Å—Ç—Ä–æ–∫—É "
            step_2+=str(np.random.randint(0, 8))
        else:
            step_2+="—Å—Ç–æ–ª–±–µ—Ü "
            step_2+=str(np.random.randint(0, 9))
    else:
        step_2+="–î–æ–±–∞–≤—å—Ç–µ "
        flag = random_bool()
        if (flag):
            step_2+="—Å—Ç—Ä–æ–∫—É "
        else:
            step_2+="—Å—Ç–æ–ª–±–µ—Ü "
        if (random_bool()):
            step_2+="–Ω—É–ª–µ–π "
        else:
            step_2+="–µ–¥–∏–Ω–∏—Ü "
        if (random_bool()):
            step_2+="–¥–æ "
        else:
            step_2+="–ø–æ—Å–ª–µ "
        if (flag):
            step_2+="—Å—Ç—Ä–æ–∫–∏ "
            step_2+=str(np.random.randint(0, 8))
        else:
            step_2+="—Å—Ç–æ–ª–±—Ü–∞ "
            step_2+=str(np.random.randint(0, 9))
    step_2+=".\n"
    
    p1 = str(np.random.randint(0, 8))
    p2 = str(np.random.randint(0, 8))
    step_3="3. –ó–∞–º–µ–Ω–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã $A[" +p1+", "+p2+"]$ –∏ "
    step_3+="$A[" +p1+", "+p2+"]$ –Ω–∞ $"
    
    if (random_bool()):
        if (random_bool()):
            step_3+="2^b"
        else:
            step_3+="b^2"
    else:
        if (random_bool()):
            step_3+= str(generate_nonzero_number(-5, 5)) +"b"
        else:
            step_3+="b"
            if (random_bool()):
                step_3+= "-"
            else:
                step_3+= "+"
            step_3+=str(np.random.randint(1, 10))
    step_3+="$.\n"
    
    step_4 = "4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É, –∑–∞–º–µ–Ω–∏–≤ $b$ –Ω–∞ " + str(np.random.randint(10, 30)) + "."
    
    text_4=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.\n"
           + step_1 + step_2 + step_3 + step_4]
    return text_4


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 4

# In[169]:


def generate_lab_4_indtask():
    needs_for_lab_4 = gen_4()
    matrix_a = markdown_matrix(needs_for_lab_4[0], "$A$")
    vector_b = markdown_matrix(needs_for_lab_4[1], "$b$")
    
    add_text = matrix_a+vector_b
    text_4=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–î–∞–Ω–∞ –°–õ–ê–£ $AX = b$, –≥–¥–µ\n",
            add_text,
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ —Ç–µ–æ—Ä–µ–º–µ –ö—Ä–æ–Ω–µ–∫–µ—Ä–∞-–ö–∞–ø–µ–ª–ª–∏.\n",
            "–ï—Å–ª–∏ –°–õ–ê–£ —Å–æ–≤–º–µ—Å—Ç–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è.\n",
           "–î–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π –°–õ–ê–£ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n",
           "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –§–°–† –∏ –æ–±—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π –°–õ–ê–£."]
    return text_4


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 6

# In[170]:


def generate_lab_6_indtask():
    needs_for_lab_6 = generate_4_points3D()
    text_6=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–î–∞–Ω—ã —Ç–æ—á–∫–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ:$A$ $" 
            + str(needs_for_lab_6[0])
            + "$, $B$ $"
            + str(needs_for_lab_6[1])
            + "$, $C$ $"
            + str(needs_for_lab_6[2])
            + "$ –∏ $M$ $"
            + str(needs_for_lab_6[3])
            + "$.\n",
            "–ù–∞–π—Ç–∏ —É–≥–æ–ª –º–µ–∂–¥—É –ø—Ä—è–º–æ–π $AB$ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å—é $z = 0$, —É–≥–æ–ª –º–µ–∂–¥—É $AC$ –∏ $CM$, —É–≥–æ–ª –º–µ–∂–¥—É –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏ $ABC$ –∏ $BCM$.\n",
            "–°–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: \n",
            "\n",
            "a) –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π $ABC$ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–π —á–µ—Ä–µ–∑ –Ω–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç,\n",
            "\n",
            "b) –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–π $ABC$ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–π —á–µ—Ä–µ–∑ $A$ –∏ $M$,\n",
            "\n",
            "c) –ø—Ä—è–º–æ–π, –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–π $ABC$ –∏ –ø—Ä–æ—Ö–æ–¥—è—â–µ–π —á–µ—Ä–µ–∑ $C$."]
    return text_6


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 8

# In[171]:


def generate_lab_8_indtask():
    needs_for_lab_8 = generate_4_points2D()
    text_8=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–î–∞–Ω—ã —Ç–æ—á–∫–∏ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏:$L$ $"
            + str(needs_for_lab_8[0])
            + "$, $M$ $"
            + str(needs_for_lab_8[1])
            + "$, $N$ $"
            + str(needs_for_lab_8[2])
            + "$ –∏ $P$ $"
            + str(needs_for_lab_8[3])
            + "$.\n",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Ä–µ–∑–æ–∫ $LM$ –∏ –ª—É—á $MN$, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–µ—Ä–µ–¥–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞  –∫ $LM$ –∏ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞ –∫ $MN$, –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É $P$, –Ω–∞–π—Ç–∏ —Ç–æ—á–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤.\n",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –æ—Ç—Ä–µ–∑–æ–∫, –ª—É—á (–≤ –≤–∏–¥–µ –æ—Ç—Ä–µ–∑–∫–∞) –∏ –æ–±–∞ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞, –æ—Ç–º–µ—Ç–∏—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ü—ã –æ—Ç—Ä–µ–∑–∫–∞ –∏ –Ω–∞—á–∞–ª–æ –ª—É—á–∞ (—Ç–æ—á–∫—É M), –∞ —Ç–∞–∫–∂–µ —Ç–æ—á–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ (—Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ —Å –æ—Ç—Ä–µ–∑–∫–æ–º –∏ –ª—É—á–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ).\n",
            "–í –ª–µ–≥–µ–Ω–¥—É –≤–∫–ª—é—á–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä—è–º—ã—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ª–µ–∂–∞—Ç –æ—Ç—Ä–µ–∑–æ–∫ –∏ –ª—É—á."]
    return text_8


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 10

# In[172]:


def generate_lab_10_indtask():
    needs_for_lab_10 = generate_coeffs_irrational()
    add_text =  "–†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: $"
    add_text+= "(" + str(needs_for_lab_10[0]) 
    add_text+=  ("+" if (needs_for_lab_10[1]>0) else "") + str(needs_for_lab_10[1]) 
    add_text+= "i)x^2+("
    add_text+= str(needs_for_lab_10[2])
    add_text+= ("+" if (needs_for_lab_10[3]>0) else "") + str(needs_for_lab_10[3])
    add_text+= "i)x"
    add_text+= ("+" if (needs_for_lab_10[4]>0) else "") + str(needs_for_lab_10[4])
    add_text+= ("+" if (needs_for_lab_10[5]>0) else "") + str(needs_for_lab_10[5])
    add_text+="i = 0$\n"
    
    text_10=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
             add_text,
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sympy.roots.\n",
            "–ö–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –≤ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–π, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ."]
    return text_10


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 12

# In[173]:


def generate_lab_12_indtask():
    needs_for_lab_12 = gen_12()
    matrix_a = markdown_matrix(needs_for_lab_12[0], "A")
    vector_e1 = markdown_matrix(needs_for_lab_12[1], "$e_1$")
    vector_e2 = markdown_matrix(needs_for_lab_12[2], "$e_2$")
    vector_e3 = markdown_matrix(needs_for_lab_12[3], "$e_3$")
    
    add_text = matrix_a+vector_e1+vector_e2+vector_e3
    
    text_12=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–ù–∞–π—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –ª–∏–Ω–µ–π–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –±–∞–∑–∏—Å–µ. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–∏—Å–µ –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤.\n",
            add_text,
             "–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ê, –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–∞–∑–∏—Å—É ($e_1$, $e_2$, $e_3$), –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–∏—Å–µ ($e_1$, $e_2$, $e_3$), –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–∞–∑–∏—Å—É –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤, –º–∞—Ç—Ä–∏—Ü—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–∏—Å–µ –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤."]
    return text_12


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 14

# In[183]:


def generate_lab_14_indtask():
    needs_for_lab_14 = gen_14()

    add_text = "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–ª–∏–ø—Å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω—Ç—Ä–æ–º $" 
    add_text += str(needs_for_lab_14[0]) + "$, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–ª—É–æ—Å—å—é $" 
    add_text += str(needs_for_lab_14[1]) + "$ –∏ —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç–æ–º $"
    add_text += str(needs_for_lab_14[2]) + "$.\n"
    add_text += "–ò–∑–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ —ç—Ç–æ—Ç —ç–ª–ª–∏–ø—Å, –∞ —Ç–∞–∫–∂–µ —ç–ª–ª–∏–ø—Å, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ —É–≥–æ–ª $\alpha = " 
    add_text += needs_for_lab_14[3] + "$ –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏.\n"
    
    text_14=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            add_text,
            "–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Ü–µ–Ω—Ç—Ä –∏ —Ñ–æ–∫—É—Å—ã —ç–ª–ª–∏–ø—Å–∞, –¥–ª–∏–Ω—ã –ø–æ–ª—É–æ—Å–µ–π, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–ª–ª–∏–ø—Å–∞, –≤–µ—Ä—à–∏–Ω—ã —ç–ª–ª–∏–ø—Å–∞."]
    return text_14


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 16

# In[177]:


def generate_lab_16_indtask():
    needs_for_lab_16 = gen_16()
    point = needs_for_lab_16[0]
    parabola_type = needs_for_lab_16[1]
    p = needs_for_lab_16[2]
    alpha = needs_for_lab_16[3]
    
    add_text = "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Parabola - –ø–∞—Ä–∞–±–æ–ª—É $" + parabola_type 
    add_text+= "$ —Å –∑–∞–¥–∞–Ω–Ω—ã–º $p = " + str(p)
    add_text+="$, –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥—É—é –ø–∞—Ä–∞–±–æ–ª—É –ø—É—Ç–µ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–±–æ–ª—ã  –Ω–∞ —É–≥–æ–ª $\alpha " 
    add_text+= alpha + "$ —Ä–∞–¥–∏–∞–Ω –∏ —Å–¥–≤–∏–≥–æ–º –≤ —Ü–µ–Ω—Ç—Ä $"+ str(point) + "$.\n"
    
    text_16=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            add_text,
             "–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –≤–µ—Ä—à–∏–Ω—É, —É–≥–æ–ª, —Ñ–æ–∫—É—Å, –æ—Å—å —Å–∏–º–º–µ—Ç—Ä–∏–∏ –∏ –¥–∏—Ä–µ–∫—Ç—Ä–∏—Å—É –æ–±–µ–∏—Ö –ø–∞—Ä–∞–±–æ–ª.\n",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ–π –ø–∞—Ä–∞–±–æ–ª—ã, –µ–µ –æ—Å–∏ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –∏ –¥–∏—Ä–µ–∫—Ç—Ä–∏—Å—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏. –ü–∞—Ä–∞–±–æ–ª–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è, –æ—Å—å —Å–∏–º–º–µ—Ç—Ä–∏–∏ –∑–µ–ª–µ–Ω–∞—è, –¥–∏—Ä–µ–∫—Ç—Ä–∏—Å–∞ —á–µ—Ä–Ω–∞—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ü–∞—Ä–∞–±–æ–ª–∞, –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π $x$ –∏ $y$."]
    return text_16


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π 18

# In[178]:


def generate_lab_18_indtask():
    needs_for_lab_18 = gen_4()
    matrix_a = markdown_matrix(needs_for_lab_18[0], "$A$")
    vector_b = markdown_matrix(needs_for_lab_18[1], "$b$")
    
    add_text = matrix_a+vector_b
    
    text_18=["### –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n",
            "–†–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é  QR —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã $A$ —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π $AX = b$.\n",
            add_text,
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ—Å—Ç—å –°–õ–ê–£."]
    return text_18


# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –≤ —Ñ–∞–π–ª .ipynb

# –Ø—á–µ–π–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è

# In[179]:


def cell_for_insert(text_arr=[], metadata_id="defaultId"):
    add_text_metadata="\"id\": \""+metadata_id+"\","
    add_text_sourse="\"source\": ["
    add_text = ""
    if (len(text_arr)>0):
        add_text="\""+text_arr[0]+"\""
        for i in range(1, len(text_arr)):
            add_text += ","+"\""+text_arr[i]+"\""
    add_text_end="]"
    return add_text_metadata + add_text_sourse + add_text + add_text_end


# –Ø—á–µ–π–∫–∞ –º–∞—Ä–∫–¥–∞—É–Ω–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è

# In[135]:


def cell_markdown(text_arr=[], metadata_id="defaultMarkdownCell", isFirst=False):
    add_text_begin="{\"cell_type\": \"markdown\","
    if (not isFirst):
        add_text_begin=","+add_text_begin
    add_text = cell_for_insert(text_arr, metadata_id)
    add_text_end="}"
    return add_text_begin + add_text + add_text_end


# –Ø—á–µ–π–∫–∞ –∫–æ–¥–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è

# In[136]:


def cell_code(text_arr=[], metadata_id="defaultCodeCell"):
    add_text_begin=",{\"cell_type\": \"code\","
    if (not isFirst):
        add_text_begin=","+add_text_begin
    add_text = cell_for_insert(text_arr, metadata_id)
    add_text_chara = ",\"execution_count\": null, \"outputs\": []}"
    return add_text_begin + add_text + add_text_chara


# ### –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —è—á–µ–µ–∫

# In[195]:


cell_markdown(generate_lab_2_indtask())


# In[115]:


cell_markdown(generate_lab_8_indtask())


# In[116]:


cell_markdown(generate_lab_10_indtask())


# In[117]:


cell_markdown(generate_lab_12_indtask())


# In[118]:


cell_markdown(["sadd\n", "meeeh"], "myIdIsClearAssHell")


# In[119]:


cell_markdown(["sadd\n", "meeeh"])


# In[120]:


cell_markdown(["sadd\n"])


# In[121]:


cell_markdown([])


# In[122]:


cell_markdown(isFirst=True)


# In[123]:


cell_markdown()


# ## –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª—é–±–æ–π –∏–∑ —á—ë—Ç–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

# In[124]:


def generate_even(n):
    add_markdown=None
    if (n==2):
        add_markdown=generate_lab_2_indtask
    elif (n==4):
        add_markdown=generate_lab_4_indtask
    elif (n==6):
        add_markdown=generate_lab_6_indtask
    elif (n==8):
        add_markdown=generate_lab_8_indtask
    elif (n==10):
        add_markdown=generate_lab_10_indtask
    elif (n==12):
        add_markdown=generate_lab_12_indtask
    elif (n==14):
        add_markdown=generate_lab_14_indtask
    elif (n==16):
        add_markdown=generate_lab_16_indtask
    elif (n==18):
        add_markdown=generate_lab_18_indtask
    else:
        return None
    add = add_markdown+cell_code(metadataId="lab"+n+"indCodeCell")
    +",\"nbformat\": 4,\"nbformat_minor\": 1]}"
    file_name= "Alg_"+str(n)+"_edit.ipynb"
    f_name="tasks_"+str(n)+".ipynb"
    file = open(file_name, 'r')
    f = open(f_name, 'a')
    f.write(file.read())
    file.close()
    f.write(add_text)
    f.close()

    return f 

